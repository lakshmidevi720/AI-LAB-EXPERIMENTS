def alpha_beta(node, depth, alpha, beta, is_maximizing, values, tree):
    if depth == 0 or node not in tree:
        return values[node]
    if is_maximizing:
        best = -9999
        for child in tree[node]:
            value = alpha_beta(child, depth - 1, alpha, beta, False, values, tree)
            if value > best:
                best = value
            if best > alpha:
                alpha = best
            if beta <= alpha:
                break
        return best
    else:
        best = 9999
        for child in tree[node]:
            value = alpha_beta(child, depth - 1, alpha, beta, True, values, tree)
            if value < best:
                best = value
            if best < beta:
                beta = best
            if beta <= alpha:
                break
        return best

tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G']
}
values = {
    'D': 3,
    'E': 5,
    'F': 6,
    'G': 9
}
result = alpha_beta('A', 3, -9999, 9999, True, values, tree)
print("Best value for the maximizing player:", result)


OUTPUT :
Best value for the maximizing player: 6
